{"name": "test_get_my_pets_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 117\nCurrent browser version is 119.0.6045.125 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF60B2578A2+54818]\n\t(No symbol) [0x00007FF60B1C6AD2]\n\t(No symbol) [0x00007FF60B07DA3B]\n\t(No symbol) [0x00007FF60B0B0972]\n\t(No symbol) [0x00007FF60B0AFDCE]\n\t(No symbol) [0x00007FF60B0AAA4B]\n\t(No symbol) [0x00007FF60B0A802E]\n\t(No symbol) [0x00007FF60B0E67FB]\n\t(No symbol) [0x00007FF60B0DE883]\n\t(No symbol) [0x00007FF60B0B3691]\n\t(No symbol) [0x00007FF60B0B48D4]\n\tGetHandleVerifier [0x00007FF60B5BB9A2+3610402]\n\tGetHandleVerifier [0x00007FF60B611870+3962352]\n\tGetHandleVerifier [0x00007FF60B609D5F+3930847]\n\tGetHandleVerifier [0x00007FF60B2F3656+693206]\n\t(No symbol) [0x00007FF60B1D1638]\n\t(No symbol) [0x00007FF60B1CD944]\n\t(No symbol) [0x00007FF60B1CDA72]\n\t(No symbol) [0x00007FF60B1BE123]\n\tBaseThreadInitThunk [0x00007FFBD04D257D+29]\n\tRtlUserThreadStart [0x00007FFBD162AA58+40]", "trace": "request = <SubRequest 'driver' for <Function test_get_my_pets_page>>, driver_class = <class 'selenium.webdriver.chrome.webdriver.WebDriver'>\ndriver_kwargs = {'desired_capabilities': {'browserName': 'chrome'}, 'executable_path': 'c:\\\\chromedriver.exe', 'options': <selenium.we...ice_log_path': 'C:\\\\Users\\\\User\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-User\\\\pytest-116\\\\test_get_my_pets_page0\\\\driver.log'}\n\n    @pytest.fixture\n    def driver(request, driver_class, driver_kwargs):\n        \"\"\"Returns a WebDriver instance based on options and capabilities\"\"\"\n    \n        retries = int(request.config.getini(\"max_driver_init_attempts\"))\n>       for retry in Retrying(\n            stop=stop_after_attempt(retries), wait=wait_exponential(), reraise=True\n        ):\n\nvenv\\Lib\\site-packages\\pytest_selenium\\pytest_selenium.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\tenacity\\__init__.py:347: in __iter__\n    do = self.iter(retry_state=retry_state)\nvenv\\Lib\\site-packages\\tenacity\\__init__.py:325: in iter\n    raise retry_exc.reraise()\nvenv\\Lib\\site-packages\\tenacity\\__init__.py:158: in reraise\n    raise self.last_attempt.result()\n..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\concurrent\\futures\\_base.py:449: in result\n    return self.__get_result()\n..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\concurrent\\futures\\_base.py:401: in __get_result\n    raise self._exception\nvenv\\Lib\\site-packages\\pytest_selenium\\pytest_selenium.py:207: in driver\n    driver = driver_class(**driver_kwargs)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:84: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:104: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:286: in __init__\n    self.start_session(capabilities, browser_profile)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:378: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023B69DE2F90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF60B1BE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBD04D257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFBD162AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 117\nE       Current browser version is 119.0.6045.125 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF60B2578A2+54818]\nE       \t(No symbol) [0x00007FF60B1C6AD2]\nE       \t(No symbol) [0x00007FF60B07DA3B]\nE       \t(No symbol) [0x00007FF60B0B0972]\nE       \t(No symbol) [0x00007FF60B0AFDCE]\nE       \t(No symbol) [0x00007FF60B0AAA4B]\nE       \t(No symbol) [0x00007FF60B0A802E]\nE       \t(No symbol) [0x00007FF60B0E67FB]\nE       \t(No symbol) [0x00007FF60B0DE883]\nE       \t(No symbol) [0x00007FF60B0B3691]\nE       \t(No symbol) [0x00007FF60B0B48D4]\nE       \tGetHandleVerifier [0x00007FF60B5BB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF60B611870+3962352]\nE       \tGetHandleVerifier [0x00007FF60B609D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF60B2F3656+693206]\nE       \t(No symbol) [0x00007FF60B1D1638]\nE       \t(No symbol) [0x00007FF60B1CD944]\nE       \t(No symbol) [0x00007FF60B1CDA72]\nE       \t(No symbol) [0x00007FF60B1BE123]\nE       \tBaseThreadInitThunk [0x00007FFBD04D257D+29]\nE       \tRtlUserThreadStart [0x00007FFBD162AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: SessionNotCreatedException"}, "start": 1700151223487, "stop": 1700151223487, "uuid": "3d9ccf24-9e05-4e4a-9b54-ed3e3c58f030", "historyId": "acf0933e5395c4e57ddc643f9d82eba0", "testCaseId": "acf0933e5395c4e57ddc643f9d82eba0", "fullName": "Users.User.PetFriendsProject.tests.test_my_pets#test_get_my_pets_page", "labels": [{"name": "parentSuite", "value": "Users.User.PetFriendsProject.tests"}, {"name": "suite", "value": "test_my_pets"}, {"name": "host", "value": "Dsesktop-DmitMark"}, {"name": "thread", "value": "23112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Users.User.PetFriendsProject.tests.test_my_pets"}]}